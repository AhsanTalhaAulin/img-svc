package main

import (
	"bytes"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"github.com/labstack/echo"

	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

type Image struct {
	ID   uint
	Name string
	Url  string
}

var BucketName = "talha-test-image-s3"

func uploadtoS3(name string, imgFile []byte) (string, error) {
	sess, err := session.NewSession(&aws.Config{
		Region: aws.String("ap-southeast-1")},
	)
	if err != nil {
		log.Printf("Could not create session, %v\n", err)
		return "", nil
	}

	uploader := s3manager.NewUploader(sess)

	result, err := uploader.Upload(&s3manager.UploadInput{
		Bucket: aws.String(BucketName),
		Key:    aws.String(name),
		Body:   bytes.NewReader(imgFile),
	})
	if err != nil {
		log.Printf("Failed to upload file, %v\n", err)
		return "", nil
	}
	log.Printf("File uploaded to, %v\n", result.Location)

	return result.Location, nil
}

func saveInDB(img Image) error {
	dsn := "root:12345678@tcp(127.0.0.1:3308)/img_db?charset=utf8mb4&parseTime=True&loc=Local"
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})

	if err != nil {
		return err
	}

	log.Println("DB connected")

	result := db.Create(&img)

	log.Println("Rows affected: ", result.RowsAffected)
	if result.Error != nil {
		log.Println(result.Error)
	}

	return nil
}

func saveImg(c echo.Context) error {

	// ---------------------------------------------------------------- getting data
	log.Println("Request received")
	var img Image

	img.Name = c.FormValue("name")
	imgfile, _ := c.FormFile("image")
	imgfileOpen, _ := imgfile.Open()
	imgfileByte, err := ioutil.ReadAll(imgfileOpen)

	if err != nil {
		log.Println(err)
		return c.String(http.StatusBadRequest, "Could not process file\n")
	}

	img.Url, err = uploadtoS3(img.Name, imgfileByte)

	if err != nil {
		log.Println(err)
		return c.String(http.StatusBadRequest, "Could not upload image\n")
	}

	err = saveInDB(img)

	if err != nil {
		log.Println(err)
		return c.String(http.StatusBadRequest, "Could not save data\n")
	}

	return c.String(http.StatusOK, "Request Successful")
}

func getPresignedUrl(name string) (string, error) {

	sess, err := session.NewSession(&aws.Config{
		Region: aws.String("ap-southeast-1")},
	)

	if err != nil {
		log.Printf("Could not create session, %v\n", err)
		return "Could not create session", nil
	}

	svc := s3.New(sess)

	req, _ := svc.GetObjectRequest(&s3.GetObjectInput{
		Bucket: aws.String(BucketName),
		Key:    aws.String(name),
	})
	urlStr, err := req.Presign(1 * time.Minute)

	if err != nil {
		log.Println("Failed to sign request", err)
		return "Failed to sign request", err
	}

	log.Println("The URL is---------->", urlStr)

	return urlStr, nil
}

func getImg(c echo.Context) error {

	name := c.QueryParam("name")

	log.Println("Image name: ", name)

	urlStr, err := getPresignedUrl(name)

	if err != nil {
		log.Println(err)
		return c.String(http.StatusBadRequest, urlStr)
	}

	return c.String(http.StatusOK, urlStr)
}

// main function
func main() {
	// create a new echo instance
	e := echo.New()

	e.POST("/img", saveImg)
	e.GET("/img", getImg)

	e.Logger.Fatal(e.Start(":8080"))
}
